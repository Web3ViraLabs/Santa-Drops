// schema.prisma

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  ADMIN
}

enum Symbol {
  ETH
  SOL
  BTC
}

model Profile {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String          @unique
  registered     Boolean         @default(false)
  role           Role            @default(USER)
  token          String          @unique
  image          String
  createdAt      DateTime        @default(now())
  wallets        Wallet[]
  connections    Account[]
  giveaways      Giveaway[]      @relation("GiveawayCreator")
  participations Participation[]

  @@index([name, token])
}

enum Provider {
  DISCORD
  TWITTER
}

model Account {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  accountId     String?
  username      String?
  image         String?
  provider      Provider
  refresh_token String?   @db.String
  access_token  String?   @db.String
  expires_at    DateTime?
  token_type    String?
  scope         String?
  profileId     String    @db.ObjectId

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Wallet {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  address    String   @unique
  btcAddress String?
  signature  String
  symbol     Symbol
  registered Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String  @db.ObjectId

  @@index([address, profileId])
}

enum Type {
  PUBLIC
  RESTRICTED
}

enum GiveawayType {
  TOKEN
  NFT
  COIN
  ALLOWLIST
  WHITELIST
}

enum BlockchainType {
  SOLANA
  ETHEREUM
  BITCOIN
  POLYGON
}

model Giveaway {
  id             String                @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  image          String?
  description    String
  endsAt         DateTime?
  blockchainType BlockchainType?
  giveawayType   GiveawayType?
  published      Boolean               @default(false)
  type           Type                  @default(PUBLIC)
  tokenDetails   TokenGiveawayDetails?
  twitterUrl     String?
  discordUrl     String?
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  creatorId      String                @db.ObjectId
  creator        Profile               @relation(name: "GiveawayCreator", fields: [creatorId], references: [id])
  participants   Participation[]
}

model TokenGiveawayDetails {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  tokenName  String
  tokenCount Int
  giveawayId String   @unique @db.ObjectId
  giveaway   Giveaway @relation(fields: [giveawayId], references: [id])
}

model Participation {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  profileId  String   @db.ObjectId
  profile    Profile  @relation(fields: [profileId], references: [id])
  giveawayId String   @db.ObjectId
  giveaway   Giveaway @relation(fields: [giveawayId], references: [id])
  joinedAt   DateTime @default(now())

  @@unique([profileId, giveawayId])
}
